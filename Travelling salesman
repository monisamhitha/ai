import itertools

def calculate_distance(city1, city2):
    # Calculate the Euclidean distance between two cities
    return ((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2)**0.5

def total_distance(route, cities):
    # Calculate the total distance of a route that visits all cities
    distance = 0
    for i in range(len(route) - 1):
        distance += calculate_distance(cities[route[i]], cities[route[i+1]])
    distance += calculate_distance(cities[route[-1]], cities[route[0]])
    return distance

def solve_tsp_bruteforce(cities):
    num_cities = len(cities)
    min_distance = float('inf')
    best_route = None

    for permutation in itertools.permutations(range(num_cities)):
        distance = total_distance(permutation, cities)
        if distance < min_distance:
            min_distance = distance
            best_route = permutation
    
    return best_route, min_distance

# Example usage
cities = [(0, 0), (1, 3), (2, 6), (5, 2), (7, 4)]
best_route, min_distance = solve_tsp_bruteforce(cities)

print("Best route:", best_route)
print("Minimum distance:", min_distance)
